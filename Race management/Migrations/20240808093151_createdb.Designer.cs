// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Race_management.Data;

#nullable disable

namespace Race_management.Migrations
{
    [DbContext(typeof(RmContext))]
    [Migration("20240808093151_createdb")]
    partial class createdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "34065a31-7772-4893-bb6b-29ceb6ca9f33",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "5185b815-b457-4eb1-befd-1ea691188c89",
                            Name = "Coach",
                            NormalizedName = "COACH"
                        },
                        new
                        {
                            Id = "3b5f2d43-4c91-4968-9219-aede3acc619a",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2e283abe-712d-4750-87af-34f25ccdaff5",
                            RoleId = "34065a31-7772-4893-bb6b-29ceb6ca9f33"
                        },
                        new
                        {
                            UserId = "4da169fc-dd73-4595-8455-f56ac38f88ec",
                            RoleId = "5185b815-b457-4eb1-befd-1ea691188c89"
                        },
                        new
                        {
                            UserId = "b9cb3c98-ca92-4b85-821d-29fe445058cd",
                            RoleId = "5185b815-b457-4eb1-befd-1ea691188c89"
                        },
                        new
                        {
                            UserId = "66bc09b3-cbc3-4f72-a572-693be9fb8465",
                            RoleId = "3b5f2d43-4c91-4968-9219-aede3acc619a"
                        },
                        new
                        {
                            UserId = "72909342-5c2f-4667-b294-45265a2b64a7",
                            RoleId = "3b5f2d43-4c91-4968-9219-aede3acc619a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Race_management.Models.RmUserIdentity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PlayerTeamTeamId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PlayerTeamTeamId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2e283abe-712d-4750-87af-34f25ccdaff5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ce3c51c-b289-4525-9a05-e5c965c6934a",
                            Email = "ashkan110mir@gmail.com",
                            EmailConfirmed = true,
                            LastName = "Mirdamadi",
                            LockoutEnabled = false,
                            Name = "Ashkan",
                            NormalizedEmail = "ASHKAN110MIR@GMAIL.COM",
                            NormalizedUserName = "ASHKANMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEDTyMJC6ECMTQqo3oz5UwuPYAbaXTRa+zcRM6Esy5onjO3P6ofaTt6t5pxm3oqNFVw==",
                            PhoneNumber = "09908752252",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a6a25421-1efc-46d2-9aff-d8c3ba3c376b",
                            TwoFactorEnabled = false,
                            UserName = "Ashkanmir"
                        },
                        new
                        {
                            Id = "4da169fc-dd73-4595-8455-f56ac38f88ec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a611085a-dea1-4c5b-a231-f4ba9eda4ac4",
                            Email = "aliMohammadi@yahoo.com",
                            EmailConfirmed = true,
                            LastName = "Mohammadi",
                            LockoutEnabled = false,
                            Name = "Ali",
                            NormalizedEmail = "ALIMOHAMMADI@YAHOO.COM",
                            NormalizedUserName = "ALIZM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHUnnFh17bPpHc63BLWXLx98MBrCaoXAh321GhVuXLd5m9CfwuWW7PX2R92hoLHHkA==",
                            PhoneNumber = "09139875623",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "90cfa873-40da-4c51-a1e2-3604450b5ccb",
                            TwoFactorEnabled = false,
                            UserName = "AliZM"
                        },
                        new
                        {
                            Id = "b9cb3c98-ca92-4b85-821d-29fe445058cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e884686-65cf-43e7-9711-67f85d1f78f6",
                            Email = "AhmadiReza@outlook.com",
                            EmailConfirmed = true,
                            LastName = "Ahmadi",
                            LockoutEnabled = false,
                            Name = "Reza",
                            NormalizedEmail = "AHMADIREZA@OUTLOOK.COM",
                            NormalizedUserName = "REZAAHMADI",
                            PasswordHash = "AQAAAAIAAYagAAAAENqefe0s9BbLIoSwCJThuXLMaw3hH07D5thEleKrmNuKQVvxabyuQs3kUxXY1+ZQ/A==",
                            PhoneNumber = "09139958123",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e62ce10e-4893-4ad3-a0e6-5128c805753c",
                            TwoFactorEnabled = false,
                            UserName = "RezaAhmadi"
                        },
                        new
                        {
                            Id = "66bc09b3-cbc3-4f72-a572-693be9fb8465",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8cf0b42-1375-4db2-afc1-000381f92d28",
                            Email = "Akbari@outlook.com",
                            EmailConfirmed = true,
                            LastName = "Akbari",
                            LockoutEnabled = false,
                            Name = "Fatemeh",
                            NormalizedEmail = "AKBARI@OUTLOOK.COM",
                            NormalizedUserName = "FATEMEHAK",
                            PasswordHash = "AQAAAAIAAYagAAAAEF+GvxenKuY7tBfRTUSIyUALYhNeW67cuoSuilg9wIi8is7ctZsN4sUFt0+NHS4rAw==",
                            PhoneNumber = "09137456723",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2c93d47d-306e-4fcf-9c70-6814b57670fc",
                            TwoFactorEnabled = false,
                            UserName = "FatemehAk"
                        },
                        new
                        {
                            Id = "72909342-5c2f-4667-b294-45265a2b64a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c872c74-9952-4bab-a320-02bac3de39e7",
                            Email = "Rahimi@yahoo.com",
                            EmailConfirmed = true,
                            LastName = "Rahimi",
                            LockoutEnabled = false,
                            Name = "Amir",
                            NormalizedEmail = "RAHIMI@YAHOO.COM",
                            NormalizedUserName = "RAHIMIA",
                            PasswordHash = "AQAAAAIAAYagAAAAEAzB+Q03KVv8w3l2POyw7zdpmYz2VFB42Hj+lWZVyy8qU2gQHmgxVR1TC4RvKDXC0Q==",
                            PhoneNumber = "09139874571",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d936f451-6112-4b4f-b3c2-48084a9efbb7",
                            TwoFactorEnabled = false,
                            UserName = "RahimiA"
                        });
                });

            modelBuilder.Entity("Race_management.Models.Show", b =>
                {
                    b.Property<int>("ShowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowId"));

                    b.Property<int>("AverageScore")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<bool>("Isactive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ShowDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShowTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShowplayerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShowId");

                    b.HasIndex("ShowplayerId");

                    b.ToTable("Shows");

                    b.HasData(
                        new
                        {
                            ShowId = 1,
                            AverageScore = -1,
                            Isactive = true,
                            ShowDate = new DateTime(2024, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShowTitle = "اجرا 1",
                            ShowplayerId = "66bc09b3-cbc3-4f72-a572-693be9fb8465"
                        },
                        new
                        {
                            ShowId = 2,
                            AverageScore = -1,
                            Isactive = true,
                            ShowDate = new DateTime(2024, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShowTitle = "اجرا 2",
                            ShowplayerId = "72909342-5c2f-4667-b294-45265a2b64a7"
                        });
                });

            modelBuilder.Entity("Race_management.Models.ShowToCoach", b =>
                {
                    b.Property<int?>("ShowId")
                        .HasColumnType("int");

                    b.Property<string>("Coachid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("score")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.HasKey("ShowId", "Coachid");

                    b.HasIndex("Coachid");

                    b.ToTable("ShowToCoache");
                });

            modelBuilder.Entity("Race_management.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<string>("CoachId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("TeamId");

                    b.HasIndex("CoachId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Race_management.Models.RmUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Race_management.Models.RmUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Race_management.Models.RmUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Race_management.Models.RmUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Race_management.Models.RmUserIdentity", b =>
                {
                    b.HasOne("Race_management.Models.Team", "PlayerTeam")
                        .WithMany("Players")
                        .HasForeignKey("PlayerTeamTeamId");

                    b.Navigation("PlayerTeam");
                });

            modelBuilder.Entity("Race_management.Models.Show", b =>
                {
                    b.HasOne("Race_management.Models.RmUserIdentity", "ShowPlayer")
                        .WithMany("PlayerShows")
                        .HasForeignKey("ShowplayerId");

                    b.Navigation("ShowPlayer");
                });

            modelBuilder.Entity("Race_management.Models.ShowToCoach", b =>
                {
                    b.HasOne("Race_management.Models.RmUserIdentity", "Coach")
                        .WithMany("CoachToShow")
                        .HasForeignKey("Coachid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Race_management.Models.Show", "Show")
                        .WithMany("ShowToCoach")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Race_management.Models.Team", b =>
                {
                    b.HasOne("Race_management.Models.RmUserIdentity", "Coach")
                        .WithMany("CoachTeams")
                        .HasForeignKey("CoachId");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Race_management.Models.RmUserIdentity", b =>
                {
                    b.Navigation("CoachTeams");

                    b.Navigation("CoachToShow");

                    b.Navigation("PlayerShows");
                });

            modelBuilder.Entity("Race_management.Models.Show", b =>
                {
                    b.Navigation("ShowToCoach");
                });

            modelBuilder.Entity("Race_management.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
