// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Race_management.Data;

#nullable disable

namespace Race_management.Migrations
{
    [DbContext(typeof(RmContext))]
    [Migration("20240808181803_CREATE DB")]
    partial class CREATEDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "aa366280-f7a2-417f-bfa2-c19c2f054bff",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "14d4435e-96ac-4e25-9a4a-97656e9d0c96",
                            Name = "Coach",
                            NormalizedName = "COACH"
                        },
                        new
                        {
                            Id = "6805597b-6688-4c7f-98d1-46ef376a1500",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f6e4a437-5d44-410e-8471-3e35112faa58",
                            RoleId = "aa366280-f7a2-417f-bfa2-c19c2f054bff"
                        },
                        new
                        {
                            UserId = "2dc3e4e8-5b7e-446e-909e-dbcb6f6e35b7",
                            RoleId = "14d4435e-96ac-4e25-9a4a-97656e9d0c96"
                        },
                        new
                        {
                            UserId = "b9923e70-ef65-48de-a15b-9c62db600c31",
                            RoleId = "14d4435e-96ac-4e25-9a4a-97656e9d0c96"
                        },
                        new
                        {
                            UserId = "fef1d6fa-147a-4842-a95d-68efdeafef25",
                            RoleId = "6805597b-6688-4c7f-98d1-46ef376a1500"
                        },
                        new
                        {
                            UserId = "ea5a2610-86f1-4776-be5f-8bb96d8f74b7",
                            RoleId = "6805597b-6688-4c7f-98d1-46ef376a1500"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Race_management.Models.RmUserIdentity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PlayerTeamTeamId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PlayerTeamTeamId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f6e4a437-5d44-410e-8471-3e35112faa58",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cc9eb85-f56d-4640-bcbb-08d9e8b1f1ef",
                            Email = "ashkan110mir@gmail.com",
                            EmailConfirmed = true,
                            LastName = "Mirdamadi",
                            LockoutEnabled = false,
                            Name = "Ashkan",
                            NormalizedEmail = "ASHKAN110MIR@GMAIL.COM",
                            NormalizedUserName = "ASHKANMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEE60dtlpHXeP9rkP8OKur8MD0MXh9FaNEFGdA8Yvkc0CvcMWUagcV8KwgMmkftxsCw==",
                            PhoneNumber = "09908752252",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "791502dc-04c4-4639-8441-ce039ebba0c3",
                            TwoFactorEnabled = false,
                            UserName = "Ashkanmir"
                        },
                        new
                        {
                            Id = "2dc3e4e8-5b7e-446e-909e-dbcb6f6e35b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79e79c83-9b86-4362-9545-cd6e6d784a3d",
                            Email = "aliMohammadi@yahoo.com",
                            EmailConfirmed = true,
                            LastName = "Mohammadi",
                            LockoutEnabled = false,
                            Name = "Ali",
                            NormalizedEmail = "ALIMOHAMMADI@YAHOO.COM",
                            NormalizedUserName = "ALIZM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBCkcNp0M7HnXB4HjDQxv7vAFK4Iu3WEpltKgWUBHPudcitv0sGpx3wPyyal03MeSg==",
                            PhoneNumber = "09139875623",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "f6b2fb98-bf7e-41d7-bddd-268e8f44fddf",
                            TwoFactorEnabled = false,
                            UserName = "AliZM"
                        },
                        new
                        {
                            Id = "b9923e70-ef65-48de-a15b-9c62db600c31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a4556a4-3dfa-4cdb-960b-d9c7ea412725",
                            Email = "AhmadiReza@outlook.com",
                            EmailConfirmed = true,
                            LastName = "Ahmadi",
                            LockoutEnabled = false,
                            Name = "Reza",
                            NormalizedEmail = "AHMADIREZA@OUTLOOK.COM",
                            NormalizedUserName = "REZAAHMADI",
                            PasswordHash = "AQAAAAIAAYagAAAAEODJ3bdlMuwCkUfoXTw8sAmB+UKdu9m0fjRFYz4IqyhsWG8I2SJOqrirTWI1idsIJg==",
                            PhoneNumber = "09139958123",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "87fb9dfe-14be-4bd8-970e-d179252a462b",
                            TwoFactorEnabled = false,
                            UserName = "RezaAhmadi"
                        },
                        new
                        {
                            Id = "fef1d6fa-147a-4842-a95d-68efdeafef25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6b257e4-46cb-4557-9122-c337fb17ef5b",
                            Email = "Akbari@outlook.com",
                            EmailConfirmed = true,
                            LastName = "Akbari",
                            LockoutEnabled = false,
                            Name = "Fatemeh",
                            NormalizedEmail = "AKBARI@OUTLOOK.COM",
                            NormalizedUserName = "FATEMEHAK",
                            PasswordHash = "AQAAAAIAAYagAAAAEAqRajVBEnyqduKfSoEcqvaxdPyqjJX7sQEMKwBKnxtspx+c2Xok2YQG2/O8/W6+Og==",
                            PhoneNumber = "09137456723",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "3b60b7d1-5e55-4bc8-9504-213dec653c6f",
                            TwoFactorEnabled = false,
                            UserName = "FatemehAk"
                        },
                        new
                        {
                            Id = "ea5a2610-86f1-4776-be5f-8bb96d8f74b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d15deb8c-0e61-4f3c-a8f5-282d1fe45580",
                            Email = "Rahimi@yahoo.com",
                            EmailConfirmed = true,
                            LastName = "Rahimi",
                            LockoutEnabled = false,
                            Name = "Amir",
                            NormalizedEmail = "RAHIMI@YAHOO.COM",
                            NormalizedUserName = "RAHIMIA",
                            PasswordHash = "AQAAAAIAAYagAAAAEFeQZETXXfexAeLGNMRmlZi87KF0ZgwrX0yRqq9Poj3VgJT2xRkwPvrUyAieU9NAjA==",
                            PhoneNumber = "09139874571",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c3f8280e-9674-4046-b606-1ee892d8c7c9",
                            TwoFactorEnabled = false,
                            UserName = "RahimiA"
                        });
                });

            modelBuilder.Entity("Race_management.Models.Show", b =>
                {
                    b.Property<int>("ShowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowId"));

                    b.Property<int>("AverageScore")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<bool>("Isactive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ShowDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShowTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShowplayerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShowId");

                    b.HasIndex("ShowplayerId");

                    b.ToTable("Shows");

                    b.HasData(
                        new
                        {
                            ShowId = 1,
                            AverageScore = -1,
                            Isactive = true,
                            ShowDate = new DateTime(2024, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShowTitle = "اجرا 1",
                            ShowplayerId = "fef1d6fa-147a-4842-a95d-68efdeafef25"
                        },
                        new
                        {
                            ShowId = 2,
                            AverageScore = -1,
                            Isactive = true,
                            ShowDate = new DateTime(2024, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShowTitle = "اجرا 2",
                            ShowplayerId = "ea5a2610-86f1-4776-be5f-8bb96d8f74b7"
                        });
                });

            modelBuilder.Entity("Race_management.Models.ShowToCoach", b =>
                {
                    b.Property<int?>("ShowId")
                        .HasColumnType("int");

                    b.Property<string>("Coachid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("score")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.HasKey("ShowId", "Coachid");

                    b.HasIndex("Coachid");

                    b.ToTable("ShowToCoache");
                });

            modelBuilder.Entity("Race_management.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<string>("CoachId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("TeamId");

                    b.HasIndex("CoachId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Race_management.Models.RmUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Race_management.Models.RmUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Race_management.Models.RmUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Race_management.Models.RmUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Race_management.Models.RmUserIdentity", b =>
                {
                    b.HasOne("Race_management.Models.Team", "PlayerTeam")
                        .WithMany("Players")
                        .HasForeignKey("PlayerTeamTeamId");

                    b.Navigation("PlayerTeam");
                });

            modelBuilder.Entity("Race_management.Models.Show", b =>
                {
                    b.HasOne("Race_management.Models.RmUserIdentity", "ShowPlayer")
                        .WithMany("PlayerShows")
                        .HasForeignKey("ShowplayerId");

                    b.Navigation("ShowPlayer");
                });

            modelBuilder.Entity("Race_management.Models.ShowToCoach", b =>
                {
                    b.HasOne("Race_management.Models.RmUserIdentity", "Coach")
                        .WithMany("CoachToShow")
                        .HasForeignKey("Coachid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Race_management.Models.Show", "Show")
                        .WithMany("ShowToCoach")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Race_management.Models.Team", b =>
                {
                    b.HasOne("Race_management.Models.RmUserIdentity", "Coach")
                        .WithMany("CoachTeams")
                        .HasForeignKey("CoachId");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Race_management.Models.RmUserIdentity", b =>
                {
                    b.Navigation("CoachTeams");

                    b.Navigation("CoachToShow");

                    b.Navigation("PlayerShows");
                });

            modelBuilder.Entity("Race_management.Models.Show", b =>
                {
                    b.Navigation("ShowToCoach");
                });

            modelBuilder.Entity("Race_management.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
