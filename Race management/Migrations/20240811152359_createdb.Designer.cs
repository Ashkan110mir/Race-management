// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Race_management.Data;

#nullable disable

namespace Race_management.Migrations
{
    [DbContext(typeof(RmContext))]
    [Migration("20240811152359_createdb")]
    partial class createdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1976493a-ba4e-4124-937a-e6ea3d7b3dc9",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "eb31047f-de5b-452a-8ab6-cfd14dbb764e",
                            Name = "Coach",
                            NormalizedName = "COACH"
                        },
                        new
                        {
                            Id = "80f28635-805f-4b55-9152-fd5f254aef77",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "6ab41ce2-3ca3-4ed8-b934-f8021cb83192",
                            RoleId = "1976493a-ba4e-4124-937a-e6ea3d7b3dc9"
                        },
                        new
                        {
                            UserId = "fd33dd2a-2455-4bc0-be05-c18011fbac49",
                            RoleId = "eb31047f-de5b-452a-8ab6-cfd14dbb764e"
                        },
                        new
                        {
                            UserId = "33398e3f-0ec9-4ecb-9b89-329c598d6a1a",
                            RoleId = "eb31047f-de5b-452a-8ab6-cfd14dbb764e"
                        },
                        new
                        {
                            UserId = "bff2e72e-d9f3-4ffd-b8a4-37522ec82753",
                            RoleId = "80f28635-805f-4b55-9152-fd5f254aef77"
                        },
                        new
                        {
                            UserId = "fcb244d1-8028-4881-a49b-4dd593fb3466",
                            RoleId = "80f28635-805f-4b55-9152-fd5f254aef77"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Race_management.Models.RmUserIdentity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamID")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TeamID");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6ab41ce2-3ca3-4ed8-b934-f8021cb83192",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17426546-656d-4a0f-8811-0aa8fa18762a",
                            Email = "ashkan110mir@gmail.com",
                            EmailConfirmed = true,
                            LastName = "Mirdamadi",
                            LockoutEnabled = false,
                            Name = "Ashkan",
                            NormalizedEmail = "ASHKAN110MIR@GMAIL.COM",
                            NormalizedUserName = "ASHKANMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEGoyoSD1SkBdXZ0767n5UFce2M9eVy0fmndF2B5donKkZqIGsmeK7l+3syF8ZSL6tA==",
                            PhoneNumber = "09908752252",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8dbae194-cbe3-42d1-8617-13436930d3ef",
                            TwoFactorEnabled = false,
                            UserName = "Ashkanmir"
                        },
                        new
                        {
                            Id = "fd33dd2a-2455-4bc0-be05-c18011fbac49",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dcfd4c37-5e6d-4571-b1b7-3f1f42da2104",
                            Email = "aliMohammadi@yahoo.com",
                            EmailConfirmed = true,
                            LastName = "Mohammadi",
                            LockoutEnabled = false,
                            Name = "Ali",
                            NormalizedEmail = "ALIMOHAMMADI@YAHOO.COM",
                            NormalizedUserName = "ALIZM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC6A4ME3rhNiASsGvZ7NEAQpIRtMl4BFQxHXV3oe8Mq3AetfzJrQlvYtQ6g6oPfdgw==",
                            PhoneNumber = "09139875623",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1ae6defd-5d03-471b-8032-635328f18ae5",
                            TwoFactorEnabled = false,
                            UserName = "AliZM"
                        },
                        new
                        {
                            Id = "33398e3f-0ec9-4ecb-9b89-329c598d6a1a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6f26d62-1eec-44d2-9bd6-6426384b74a1",
                            Email = "AhmadiReza@outlook.com",
                            EmailConfirmed = true,
                            LastName = "Ahmadi",
                            LockoutEnabled = false,
                            Name = "Reza",
                            NormalizedEmail = "AHMADIREZA@OUTLOOK.COM",
                            NormalizedUserName = "REZAAHMADI",
                            PasswordHash = "AQAAAAIAAYagAAAAEKkTtLA3COmprUT9xq0MwB2LCz+RrwapJF+AGDP9samCdcIvjqoYVG5xYOYvudA/yA==",
                            PhoneNumber = "09139958123",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b3a3523e-d3d8-45a4-bda1-172be6fbd981",
                            TwoFactorEnabled = false,
                            UserName = "RezaAhmadi"
                        },
                        new
                        {
                            Id = "bff2e72e-d9f3-4ffd-b8a4-37522ec82753",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50e1156c-8f36-4903-b241-f4a930e5d509",
                            Email = "Akbari@outlook.com",
                            EmailConfirmed = true,
                            LastName = "Akbari",
                            LockoutEnabled = false,
                            Name = "Fatemeh",
                            NormalizedEmail = "AKBARI@OUTLOOK.COM",
                            NormalizedUserName = "FATEMEHAK",
                            PasswordHash = "AQAAAAIAAYagAAAAELBypGliQfrTC+UbPE9cBs6tAsDsevaD3GxpFLs44RwJ4jgDVbd3j2VTsI0lwgKayw==",
                            PhoneNumber = "09137456723",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8bb82703-7ff3-4e14-b9e2-e8759c4b4517",
                            TwoFactorEnabled = false,
                            UserName = "FatemehAk"
                        },
                        new
                        {
                            Id = "fcb244d1-8028-4881-a49b-4dd593fb3466",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4de18573-f4f6-4fb1-8def-29fa28561590",
                            Email = "Rahimi@yahoo.com",
                            EmailConfirmed = true,
                            LastName = "Rahimi",
                            LockoutEnabled = false,
                            Name = "Amir",
                            NormalizedEmail = "RAHIMI@YAHOO.COM",
                            NormalizedUserName = "RAHIMIA",
                            PasswordHash = "AQAAAAIAAYagAAAAEKmXyu0C/E0b04fUd1iSolvK5fNmof/LLtecvhSJMRH7miL8N3guEiTilUtVFIkBbw==",
                            PhoneNumber = "09139874571",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1d6825db-a296-4890-bf48-61d45683d8ac",
                            TwoFactorEnabled = false,
                            UserName = "RahimiA"
                        });
                });

            modelBuilder.Entity("Race_management.Models.Show", b =>
                {
                    b.Property<int>("ShowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowId"));

                    b.Property<int>("AverageScore")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<bool>("Isactive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ShowDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShowTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShowplayerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShowId");

                    b.HasIndex("ShowplayerId");

                    b.ToTable("Shows");

                    b.HasData(
                        new
                        {
                            ShowId = 1,
                            AverageScore = -1,
                            Isactive = true,
                            ShowDate = new DateTime(2024, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShowTitle = "اجرا 1",
                            ShowplayerId = "bff2e72e-d9f3-4ffd-b8a4-37522ec82753"
                        },
                        new
                        {
                            ShowId = 2,
                            AverageScore = -1,
                            Isactive = true,
                            ShowDate = new DateTime(2024, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShowTitle = "اجرا 2",
                            ShowplayerId = "fcb244d1-8028-4881-a49b-4dd593fb3466"
                        });
                });

            modelBuilder.Entity("Race_management.Models.ShowToCoach", b =>
                {
                    b.Property<int?>("ShowId")
                        .HasColumnType("int");

                    b.Property<string>("Coachid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("score")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.HasKey("ShowId", "Coachid");

                    b.HasIndex("Coachid");

                    b.ToTable("ShowToCoache");
                });

            modelBuilder.Entity("Race_management.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<string>("CoachId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("TeamId");

                    b.HasIndex("CoachId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Race_management.Models.RmUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Race_management.Models.RmUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Race_management.Models.RmUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Race_management.Models.RmUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Race_management.Models.RmUserIdentity", b =>
                {
                    b.HasOne("Race_management.Models.Team", "PlayerTeam")
                        .WithMany("Players")
                        .HasForeignKey("TeamID");

                    b.Navigation("PlayerTeam");
                });

            modelBuilder.Entity("Race_management.Models.Show", b =>
                {
                    b.HasOne("Race_management.Models.RmUserIdentity", "ShowPlayer")
                        .WithMany("PlayerShows")
                        .HasForeignKey("ShowplayerId");

                    b.Navigation("ShowPlayer");
                });

            modelBuilder.Entity("Race_management.Models.ShowToCoach", b =>
                {
                    b.HasOne("Race_management.Models.RmUserIdentity", "Coach")
                        .WithMany("CoachToShow")
                        .HasForeignKey("Coachid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Race_management.Models.Show", "Show")
                        .WithMany("ShowToCoach")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Race_management.Models.Team", b =>
                {
                    b.HasOne("Race_management.Models.RmUserIdentity", "Coach")
                        .WithMany("CoachTeams")
                        .HasForeignKey("CoachId");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Race_management.Models.RmUserIdentity", b =>
                {
                    b.Navigation("CoachTeams");

                    b.Navigation("CoachToShow");

                    b.Navigation("PlayerShows");
                });

            modelBuilder.Entity("Race_management.Models.Show", b =>
                {
                    b.Navigation("ShowToCoach");
                });

            modelBuilder.Entity("Race_management.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
